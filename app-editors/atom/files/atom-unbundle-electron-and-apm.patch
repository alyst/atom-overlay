From c3576cf8bcf2ccb943757c66f0048fba0c9d8a3b Mon Sep 17 00:00:00 2001
From: Elvis Pranskevichus <elvis@magic.io>
Date: Thu, 11 Feb 2016 22:07:19 -0500
Subject: [PATCH] Unbundle electron and apm

---
 atom.sh                       | 12 +++++-------
 build/Gruntfile.coffee        |  2 +-
 build/package.json            |  1 -
 build/tasks/build-task.coffee |  6 +-----
 script/bootstrap              | 21 +--------------------
 src/package-manager.coffee    |  8 +-------
 6 files changed, 9 insertions(+), 41 deletions(-)

diff --git a/atom.sh b/atom.sh
index ef8dbcd..9f8a5a8 100755
--- a/atom.sh
+++ b/atom.sh
@@ -89,11 +89,9 @@ elif [ $OS == 'Linux' ]; then
   SCRIPT=$(readlink -f "$0")
   USR_DIRECTORY=$(readlink -f $(dirname $SCRIPT)/..)
 
-  if [ -n "$BETA_VERSION" ]; then
-    ATOM_PATH="$USR_DIRECTORY/share/atom-beta/atom"
-  else
-    ATOM_PATH="$USR_DIRECTORY/share/atom/atom"
-  fi
+  export NPM_CONFIG_NODEDIR="/usr/include/electron/node/"
+  export ATOM_RESOURCE_PATH="{{ATOM_RESOURCE_PATH}}"
+  ATOM_PATH="{{ATOM_PATH}}"
 
   ATOM_HOME="${ATOM_HOME:-$HOME/.atom}"
   mkdir -p "$ATOM_HOME"
@@ -103,11 +101,11 @@ elif [ $OS == 'Linux' ]; then
   [ -x "$ATOM_PATH" ] || ATOM_PATH="$TMPDIR/atom-build/Atom/atom"
 
   if [ $EXPECT_OUTPUT ]; then
-    "$ATOM_PATH" --executed-from="$(pwd)" --pid=$$ "$@"
+    "$ATOM_PATH" --app="$ATOM_RESOURCE_PATH" --executed-from="$(pwd)" --pid=$$ "$@"
     exit $?
   else
     (
-    nohup "$ATOM_PATH" --executed-from="$(pwd)" --pid=$$ "$@" > "$ATOM_HOME/nohup.out" 2>&1
+    nohup "$ATOM_PATH" --app="$ATOM_RESOURCE_PATH" --executed-from="$(pwd)" --pid=$$ "$@" > "$ATOM_HOME/nohup.out" 2>&1
     if [ $? -ne 0 ]; then
       cat "$ATOM_HOME/nohup.out"
       exit $?
diff --git a/build/Gruntfile.coffee b/build/Gruntfile.coffee
index a34e1fb..eb9f3e3 100644
--- a/build/Gruntfile.coffee
+++ b/build/Gruntfile.coffee
@@ -306,7 +306,7 @@ module.exports = (grunt) ->
   ciTasks.push('publish-build') unless process.env.CI
   grunt.registerTask('ci', ciTasks)
 
-  defaultTasks = ['download-electron', 'download-electron-chromedriver', 'build', 'set-version', 'generate-asar']
+  defaultTasks = ['build', 'set-version', 'generate-asar']
   unless process.platform is 'linux' or grunt.option('no-install')
     defaultTasks.push 'install'
   grunt.registerTask('default', defaultTasks)
diff --git a/build/package.json b/build/package.json
index 2f8d88d..fcc00be 100644
--- a/build/package.json
+++ b/build/package.json
@@ -32,7 +32,6 @@
     "grunt-standard": "^2.0.0",
     "legal-eagle": "~0.13.0",
     "minidump": "~0.9",
-    "npm": "2.13.3",
     "rcedit": "~0.3.0",
     "request": "~2.27.0",
     "rimraf": "~2.2.2",
diff --git a/build/tasks/build-task.coffee b/build/tasks/build-task.coffee
index 9164f8d..8a56f54 100644
--- a/build/tasks/build-task.coffee
+++ b/build/tasks/build-task.coffee
@@ -19,7 +19,7 @@ module.exports = (grunt) ->
       fs.renameSync path.join(shellAppDir, 'Contents', 'MacOS', 'Electron'), path.join(shellAppDir, 'Contents', 'MacOS', 'Atom')
       fs.renameSync path.join(shellAppDir, 'Contents', 'Frameworks', 'Electron Helper.app'), path.join(shellAppDir, 'Contents', 'Frameworks', 'Atom Helper.app')
       fs.renameSync path.join(shellAppDir, 'Contents', 'Frameworks', 'Atom Helper.app', 'Contents', 'MacOS', 'Electron Helper'), path.join(shellAppDir, 'Contents', 'Frameworks', 'Atom Helper.app', 'Contents', 'MacOS', 'Atom Helper')
-    else
+    else if false
       cp 'electron', shellAppDir, filter: /default_app/
 
       if process.platform is 'win32'
@@ -169,10 +169,6 @@ module.exports = (grunt) ->
     cp 'src', path.join(appDir, 'src'), filter: /.+\.(cson|coffee)$/
     cp 'static', path.join(appDir, 'static')
 
-    cp path.join('apm', 'node_modules', 'atom-package-manager'), path.resolve(appDir, '..', 'new-app', 'apm'), filter: filterNodeModule
-    if process.platform isnt 'win32'
-      fs.symlinkSync(path.join('..', '..', 'bin', 'apm'), path.resolve(appDir, '..', 'new-app', 'apm', 'node_modules', '.bin', 'apm'))
-
     channel = grunt.config.get('atom.channel')
 
     cp path.join('resources', 'app-icons', channel, 'png', '1024.png'), path.join(appDir, 'resources', 'atom.png')
diff --git a/script/bootstrap b/script/bootstrap
index 83ec712..a95bf51 100755
--- a/script/bootstrap
+++ b/script/bootstrap
@@ -33,13 +33,7 @@ function executeCommands(commands, done, index) {
 }
 
 function bootstrap() {
-  var apmInstallPath = path.resolve(__dirname, '..', 'apm');
-  if (!fs.existsSync(apmInstallPath))
-    fs.mkdirSync(apmInstallPath);
-  if (!fs.existsSync(path.join(apmInstallPath, 'node_modules')))
-    fs.mkdirSync(path.join(apmInstallPath, 'node_modules'));
-
-  var apmPath = path.resolve(__dirname, '..', 'apm', 'node_modules', 'atom-package-manager', 'bin', 'apm')
+  var apmPath = '/usr/bin/apm'
   var apmFlags = process.env.JANKY_SHA1 || process.argv.indexOf('--no-color') !== -1 ? ' --no-color' : '';
 
   var npmPath = path.resolve(__dirname, '..', 'build', 'node_modules', '.bin', 'npm');
@@ -75,8 +69,6 @@ function bootstrap() {
 
   var buildInstallCommand = initialNpmCommand + npmFlags + 'install';
   var buildInstallOptions = {cwd: path.resolve(__dirname, '..', 'build')};
-  var apmInstallCommand = npmPath + npmFlags + '--target=0.10.35 ' + 'install';
-  var apmInstallOptions = {cwd: apmInstallPath};
   var moduleInstallCommand = apmPath + ' install' + apmFlags;
   var dedupeApmCommand = apmPath + ' dedupe' + apmFlags;
 
@@ -99,18 +91,12 @@ function bootstrap() {
 
   if (process.argv.indexOf('--no-quiet') === -1) {
     buildInstallCommand  += ' --loglevel error';
-    apmInstallCommand    += ' --loglevel error';
     moduleInstallCommand += ' --loglevel error';
     dedupeApmCommand     += ' --quiet';
     buildInstallOptions.ignoreStdout = true;
     apmInstallOptions.ignoreStdout = true;
   }
 
-  // apm ships with 32-bit node so make sure its native modules are compiled
-  // for a 32-bit target architecture
-  if (process.env.JANKY_SHA1 && process.platform === 'win32')
-    apmInstallCommand += ' --arch=ia32';
-
   var commands = [
     {
       command: buildInstallCommand,
@@ -118,11 +104,6 @@ function bootstrap() {
       options: buildInstallOptions
     },
     {
-      command: apmInstallCommand,
-      message: 'Installing apm...',
-      options: apmInstallOptions
-    },
-    {
       command: apmPath + ' clean' + apmFlags,
       message: 'Deleting old packages...',
       options: moduleInstallOptions
diff --git a/src/package-manager.coffee b/src/package-manager.coffee
index 33f8f86..c266cd7 100644
--- a/src/package-manager.coffee
+++ b/src/package-manager.coffee
@@ -132,13 +132,7 @@ class PackageManager
   getApmPath: ->
     return @apmPath if @apmPath?
 
-    commandName = 'apm'
-    commandName += '.cmd' if process.platform is 'win32'
-    apmRoot = path.join(process.resourcesPath, 'app', 'apm')
-    @apmPath = path.join(apmRoot, 'bin', commandName)
-    unless fs.isFileSync(@apmPath)
-      @apmPath = path.join(apmRoot, 'node_modules', 'atom-package-manager', 'bin', commandName)
-    @apmPath
+    @apmPath = '/usr/bin/apm'
 
   # Public: Get the paths being used to look for packages.
   #
-- 
2.4.10

